// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: protos/options_def.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "./google/wrappers";

export const protobufPackage = "";

export enum HeadingModeProto {
  waypoint = 0,
  hold = 1,
  UNRECOGNIZED = -1,
}

export function headingModeProtoFromJSON(object: any): HeadingModeProto {
  switch (object) {
    case 0:
    case "waypoint":
      return HeadingModeProto.waypoint;
    case 1:
    case "hold":
      return HeadingModeProto.hold;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HeadingModeProto.UNRECOGNIZED;
  }
}

export function headingModeProtoToJSON(object: HeadingModeProto): string {
  switch (object) {
    case HeadingModeProto.waypoint:
      return "waypoint";
    case HeadingModeProto.hold:
      return "hold";
    case HeadingModeProto.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SetHeadingOptionsProto {
  headingMode: HeadingModeProto;
  value: number;
  autoActivation: boolean;
  isNoDrift: boolean | undefined;
}

export interface SetSpeedOptionsProto {
  value: number;
}

function createBaseSetHeadingOptionsProto(): SetHeadingOptionsProto {
  return { headingMode: 0, value: 0, autoActivation: false, isNoDrift: undefined };
}

export const SetHeadingOptionsProto: MessageFns<SetHeadingOptionsProto> = {
  encode(message: SetHeadingOptionsProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.headingMode !== 0) {
      writer.uint32(8).int32(message.headingMode);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint32(message.value);
    }
    if (message.autoActivation !== false) {
      writer.uint32(24).bool(message.autoActivation);
    }
    if (message.isNoDrift !== undefined) {
      BoolValue.encode({ value: message.isNoDrift! }, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetHeadingOptionsProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetHeadingOptionsProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.headingMode = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.autoActivation = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.isNoDrift = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetHeadingOptionsProto {
    return {
      headingMode: isSet(object.headingMode) ? headingModeProtoFromJSON(object.headingMode) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      autoActivation: isSet(object.autoActivation) ? globalThis.Boolean(object.autoActivation) : false,
      isNoDrift: isSet(object.isNoDrift) ? Boolean(object.isNoDrift) : undefined,
    };
  },

  toJSON(message: SetHeadingOptionsProto): unknown {
    const obj: any = {};
    if (message.headingMode !== 0) {
      obj.headingMode = headingModeProtoToJSON(message.headingMode);
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    if (message.autoActivation !== false) {
      obj.autoActivation = message.autoActivation;
    }
    if (message.isNoDrift !== undefined) {
      obj.isNoDrift = message.isNoDrift;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetHeadingOptionsProto>, I>>(base?: I): SetHeadingOptionsProto {
    return SetHeadingOptionsProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetHeadingOptionsProto>, I>>(object: I): SetHeadingOptionsProto {
    const message = createBaseSetHeadingOptionsProto();
    message.headingMode = object.headingMode ?? 0;
    message.value = object.value ?? 0;
    message.autoActivation = object.autoActivation ?? false;
    message.isNoDrift = object.isNoDrift ?? undefined;
    return message;
  },
};

function createBaseSetSpeedOptionsProto(): SetSpeedOptionsProto {
  return { value: 0 };
}

export const SetSpeedOptionsProto: MessageFns<SetSpeedOptionsProto> = {
  encode(message: SetSpeedOptionsProto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetSpeedOptionsProto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSpeedOptionsProto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSpeedOptionsProto {
    return { value: isSet(object.value) ? globalThis.Number(object.value) : 0 };
  },

  toJSON(message: SetSpeedOptionsProto): unknown {
    const obj: any = {};
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSpeedOptionsProto>, I>>(base?: I): SetSpeedOptionsProto {
    return SetSpeedOptionsProto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetSpeedOptionsProto>, I>>(object: I): SetSpeedOptionsProto {
    const message = createBaseSetSpeedOptionsProto();
    message.value = object.value ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
  ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U>
  ? ReadonlyArray<DeepPartial<U>>
  : T extends {}
  ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
